package ada

import (
	"ada-telegram-bot/pkg/models"
	"fmt"
	"log"
	"os"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–æ—Ç–∞
type AdaBot struct {
	bot      *tgbotapi.BotAPI
	db       models.DB
	sessions map[int64]*models.Session
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞.
func NewAdaBot(db models.DB) (*AdaBot, error) {
	bot, err := tgbotapi.NewBotAPI(os.Getenv("TG_TOKEN"))
	if err != nil {
		return nil, fmt.Errorf("NewBotTelegram: tgbotapi.NewBotAPI: %w", err)
	}
	bot.Debug = false

	tgBot := AdaBot{
		bot:      bot,
		db:       db,
		sessions: make(map[int64]*models.Session, 10),
	}

	return &tgBot, nil
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
func (a *AdaBot) Run() error {
	// –ó–∞–ø—É—Å–∫ –∞–ª–µ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
	go a.alertTicker()

	//TODO: –†–µ–∂–∏–º –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—É–∫–æ–≤ (–≤—ã–±–æ—Ä)
	return a.runUpdater()
}

// –ó–∞–ø—É—Å–∫ –∞–ø–¥–µ–π—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
func (a *AdaBot) runUpdater() error {
	log.Printf("Authorized on account %s", a.bot.Self.UserName)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π
	updater := tgbotapi.NewUpdate(0)
	updater.Timeout = 30

	if err := a.handler(a.bot.GetUpdatesChan(updater)); err != nil {
		return err
	}
	return nil
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
func (a *AdaBot) handler(updates tgbotapi.UpdatesChannel) error {
	for update := range updates {
		userId := update.Message.Chat.ID
		var msg *tgbotapi.Message
		var data string

		// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
		switch {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
		case update.Message != nil:
			msg = update.Message
			data = msg.Text
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
		case update.Message != nil && update.Message.IsCommand():
			msg = update.Message
			data = msg.Command()
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ CallbackQuery
		case update.CallbackQuery != nil:
			msg = update.CallbackQuery.Message
			data = update.CallbackQuery.Data
		}

		// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		log.Printf("\nuserId: %d; messageId: %d, data: %s;\n", userId, msg.MessageID, data)

		// –ü—Ä–æ–≤—Ä–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if err := a.createUser(msg); err != nil {
			log.Printf("user_id: %d; error a.createUser: %v", userId, err)
			continue
		}

		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
		if err := a.db.AddUserMessageId(userId, msg.MessageID, "user"); err != nil {
			log.Printf("user_id: %d; error db.AddUserMessageId: %v", userId, err)
			continue
		}

		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
		if err := a.db.UpdateLastActive(userId); err != nil {
			log.Printf("user_id: %d; error db.UpdateLastActive: %v", userId, err)
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
		go a.handlerSession(userId, msg.MessageID, data)

	}

	return fmt.Errorf("updates channel closed")
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ—Å—Å–∏–π.
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
func (a *AdaBot) handlerSession(userId int64, messageId int, data string) {
	session, err := a.db.GetLastSession(userId)
	if err != nil {
		log.Printf("userId: %d; messageId: %d, error a.getSession: %v", userId, messageId, err)
		return
	}

	// –°—Ç–æ–ø —Å–ª–æ–≤–æ (—Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏)
	if data == "start" || data == "/start" {
		if err := a.start(userId); err != nil {
			log.Printf("userId: %d; messageId: %d, error a.start: %v", userId, messageId, err)
			return
		}
		return
	}

	switch {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏
	case session.F != nil:
		if err := a.handlerFunc(userId, data); err != nil {
			log.Printf("userId: %d; messageId: %d, error db.handlerFunc: %v", userId, messageId, err)
			return
		}
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ø–æ—á–µ–∫
	case session.C != nil:
		if err := a.handlerChain(userId, data); err != nil {
			log.Printf("userId: %d; messageId: %d, error db.handlerChain: %v", userId, messageId, err)
			return
		}
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
	case session.M != nil:
		if err := a.handlerMenu(userId, data); err != nil {
			log.Printf("userId: %d; messageId: %d, error db.handlerMenu: %v", userId, messageId, err)
			return
		}
	default:
		if err := a.sendErrorMessage(userId); err != nil {
			log.Printf("user_id: %d; error sendErrorMessage: %v", userId, err)
			return
		}
	}
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î.
func (a *AdaBot) sendMessage(userId int64, c tgbotapi.Chattable) error {
	botMsg, err := a.bot.Send(c)
	if err != nil {
		return err
	}

	if err := a.db.AddUserMessageId(userId, botMsg.MessageID, "bot"); err != nil {
		return err
	}

	return nil
}

// –ü—Ä–æ–≤—Ä–µ–∫–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
func (a *AdaBot) createUser(msg *tgbotapi.Message) error {
	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.
	if err := a.db.CreateUser(msg.Chat.ID, msg.Chat.UserName, msg.Chat.FirstName); err != nil {
		return fmt.Errorf("error db.CreateUser: %w", err)
	}
	return nil
}

// –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏.
func (a *AdaBot) start(userId int64) error {
	// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
	if err := a.resetSession(userId); err != nil {
		return fmt.Errorf("error resetSession: %w", err)
	}

	// –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞.
	if err := a.cleareChat(userId); err != nil {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

	// TODO: –û—Ç–ø—Ä–∞–≤–∫–∞ adMsg.
	// if viper.GetBool("ada_bot.ad_message") {
	// 	if err := a.sendAdMessage(userId); err != nil {
	// 		return err
	// 	}
	// }

	// TODO –û—Ç–ø—Ä–∞–≤–∫–∞ infoMsg.

	// –û—Ç–ø—Ä–∞–≤–∫–∞ startMsg.
	if err := a.sendStartMessage(userId); err != nil {
		return err
	}

	return nil
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ startMessage
func (a *AdaBot) sendStartMessage(userId int64) error {
	text := `üìì <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>`
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–†–µ–∫–ª–∞–º–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", "ad"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "statistics"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "info"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "help"),
		),
	)
	botMsg := tgbotapi.NewMessage(userId, text)
	botMsg.ParseMode = tgbotapi.ModeHTML
	botMsg.ReplyMarkup = keyboard

	if err := a.sendMessage(userId, botMsg); err != nil {
		return fmt.Errorf("error send startMessage: %w", err)
	}

	return nil
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ adMessage
// TODO: –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
func (a *AdaBot) sendAdMessage(userId int64) error {
	// –°–æ–∑–¥–∞–Ω–∏–µ botMsg adMessage.
	text := `üìì <b>üíµ –†–ï–ö–õ–ê–ú–ê </b>`
	// keyboard := tgbotapi.NewInlineKeyboardMarkup(
	// 	tgbotapi.NewInlineKeyboardRow(
	// 		tgbotapi.NewInlineKeyboardButtonData("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏", "ad_event"),
	// 	),
	// )
	botMsg := tgbotapi.NewMessage(userId, text)
	botMsg.ParseMode = tgbotapi.ModeHTML
	// botMsg.ReplyMarkup = keyboard

	// –û—Ç–ø—Ä–∞–≤–∫–∞ botMsg adMessage.
	newAdMessage, err := a.bot.Send(botMsg)
	if err != nil {
		return fmt.Errorf("error send new adMessage: %w", err)
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ adMessageId.
	if err := a.db.AddUserMessageId(userId, newAdMessage.MessageID, "ad"); err != nil {
		return err
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–∞—Ä–æ–≥–æ startMessage.
	adMessageId, err := a.db.GetAdMessageId(userId)
	if err != nil {
		log.Println("b.db.GetStartmessageId startMenu error: ", err)
	}
	a.cleareMessage(userId, adMessageId)

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ adMessage.
	if err := a.db.UpdateAdMessageId(userId, newAdMessage.MessageID); err != nil {
		return err
	}

	return nil
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
func (a *AdaBot) sendErrorMessage(userId int64) error {
	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	botMsg := tgbotapi.NewMessage(userId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü•≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ <b>/start</b> ")
	botMsg.ParseMode = tgbotapi.ModeHTML
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)
	botMsg.ReplyMarkup = keyboard
	if err := a.sendMessage(userId, botMsg); err != nil {
		return fmt.Errorf("error send errorMessage: %w", err)
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
	session, err := a.db.GetLastSession(userId)
	if err != nil {
		return fmt.Errorf("error db.GetLastSession: %w", err)
	}

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
	log.Printf("user_id: %d, session: %v", userId, session)
	return nil
}

// –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
func (a *AdaBot) cleareMessage(userId int64, messageId int) error {
	if err := a.db.DeleteUsermessageId(messageId); err != nil {
		return err
	}

	deleteMsg := tgbotapi.NewDeleteMessage(userId, messageId)
	if _, err := a.bot.Send(deleteMsg); err != nil {
		return fmt.Errorf("error cleare messageId%d: %w", messageId, err)
	}
	return nil
}

// –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
func (a *AdaBot) cleareChat(userId int64) error {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö messageId
	messageIds, err := a.db.GetUserMessageIds(userId)
	if err != nil {
		return err
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
	for _, messageId := range messageIds {
		a.cleareMessage(userId, messageId)
	}

	return nil
}

// –û—Ç–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è
// TODO –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
func (a *AdaBot) backStep(userId int64) error {
	// –£–¥–∞–ª–µ–Ω–∏–µ –∫—Ä–∞–π–Ω–µ–π —Å–µ—Å—Å–∏–∏
	if err := a.db.DeleteLastSession(userId); err != nil {
		return fmt.Errorf("error db.DeleteLastSession: %w", err)
	}
	//

	return nil
}

// –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏.
func (a *AdaBot) resetSession(userId int64) error {
	// –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π
	if err := a.db.DeleteAllSession(userId); err != nil {
		return fmt.Errorf("error db.DeleteAllSession: %w", err)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
	startSession := models.Session{
		M:    []models.Menu{"start"},
		Data: make(map[string]interface{}),
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏
	a.sessions[userId] = &startSession

	if err := a.saveSession(userId); err != nil {
		
		return fmt.Errorf("error saveSession: %w", err)
	}

	return nil
}

// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î
func (a *AdaBot) saveSession(userId int64) error {
	if _, err := a.db.SaveSassion(userId, a.sessions[userId]); err != nil {
		return fmt.Errorf("error db.AddSession: %w", err)
	}

	return nil
}

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É
func (a *AdaBot) getDataSession(userId int64, key string) (value interface{}) {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
	session, err := a.db.GetLastSession(userId)
	if err != nil {
		return fmt.Errorf("error a.getSession: %w", err)
	}

	return session.Data[key]
}

// –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É
func (a *AdaBot) setDataSession(userId int64, key string, value interface{}) error {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
	session, err := a.db.GetLastSession(userId)
	if err != nil {
		return fmt.Errorf("error a.getSession: %w", err)
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
	session.Data[key] = value

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
	_, err = a.db.SaveSassion(userId, session)
	if err != nil {
		return fmt.Errorf("error db.AddSession: %w", err)
	}

	return nil
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
func (a *AdaBot) addMenu(userId int64, m models.Menu) error {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
	session, err := a.db.GetLastSession(userId)
	if err != nil {
		return fmt.Errorf("error a.getSession: %w", err)
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
	session.M = append(session.M, m)

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ –±–¥
	_, err = a.db.SaveSassion(userId, session)
	if err != nil {
		return fmt.Errorf("error db.AddSession: %w", err)
	}

	return nil
}
