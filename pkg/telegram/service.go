package telegram

import (
	"AdaTelegramBot/internal/models"
	"fmt"
	"log"
	"os"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞.
type BotTelegram struct {
	bot                  *tgbotapi.BotAPI
	db                   models.TelegramBotDB
	sessions             map[int64]*models.Session
	adEventsCache        map[int64][][]models.AdEvent // –•—ç—à-—Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ –ë–î —Å–æ–±—ã—Ç–∏–π.
	adEventCreatingCache map[int64]*models.AdEvent    // –•—ç—à-—Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö ad —Å–æ–±—ã—Ç–∏–π.
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞.
func NewBotTelegram(db models.TelegramBotDB) (*BotTelegram, error) {
	bot, err := tgbotapi.NewBotAPI(os.Getenv("TG_TOKEN"))
	if err != nil {
		return nil, fmt.Errorf("NewBotTelegram: tgbotapi.NewBotAPI: %w", err)
	}
	bot.Debug = false

	tgBot := BotTelegram{
		bot:                  bot,
		db:                   db,
		sessions:             make(map[int64]*models.Session),
		adEventsCache:        make(map[int64][][]models.AdEvent),
		adEventCreatingCache: make(map[int64]*models.AdEvent),
	}

	return &tgBot, nil
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π.
func (b *BotTelegram) InitUpdatesChannel() tgbotapi.UpdatesChannel {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 30
	return b.bot.GetUpdatesChan(u)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
func (b *BotTelegram) handlerUpdates(updates tgbotapi.UpdatesChannel) error {
	for update := range updates {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥.
		if update.Message != nil && update.Message.IsCommand() {
			// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
			if err := b.db.AddUserMessageId(update.Message.Chat.ID,
				update.Message.MessageID); err != nil {
				log.Println("critical error: error AddUserMessageId to data base: ", err)
				return err
			}

			go b.handlerCommand(update.Message)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
		if update.Message != nil {
			// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
			if err := b.db.AddUserMessageId(update.Message.Chat.ID,
				update.Message.MessageID); err != nil {
				log.Println("critical error: error AddUserMessageId to data base: ", err)
				return err
			}

			go b.handlerMessage(update.Message)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ CallbackQuery.
		if update.CallbackQuery != nil {
			// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
			if err := b.db.AddUserMessageId(update.CallbackQuery.Message.Chat.ID,
				update.CallbackQuery.Message.MessageID); err != nil {
				log.Println("critical error: error AddUserMessageId to data base: ", err)
				return err
			}

			go b.handlerCbq(update.CallbackQuery)
			continue
		}
	}

	return fmt.Errorf("updates channel closed")
}

// –ó–∞–ø—É—Å–∫ –∞–ø–¥–µ–π—Ç–µ—Ä–∞.
func (b *BotTelegram) StartBotUpdater() error {
	log.Printf("Authorized on account %s", b.bot.Self.UserName)
	updates := b.InitUpdatesChannel()
	go b.alertTicker()
	if err := b.handlerUpdates(updates); err != nil {
		return err
	}
	return nil
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö—ç—à–∞ ad —Å–æ–±—ã—Ç–∏—è.
func (b *BotTelegram) getAdEventCreatingCache(userId int64) (*models.AdEvent, error) {
	adEvent, ok := b.adEventCreatingCache[userId]
	if ok {
		return adEvent, nil
	}

	if err := b.sendRequestRestartMsg(userId); err != nil {
		return nil, err
	}

	return nil, fmt.Errorf("adEvent cache not found")
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö—ç—à–∞ ad —Å–æ–±—ã—Ç–∏–π.
func (b *BotTelegram) getAdEventsCache(userId int64) ([][]models.AdEvent, error) {
	adEvents, ok := b.adEventsCache[userId]
	if ok {
		return adEvents, nil
	}

	if err := b.sendRequestRestartMsg(userId); err != nil {
		return nil, err
	}

	return nil, fmt.Errorf("adEvents cache not found")
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ.
func (b *BotTelegram) sendRequestRestartMsg(userId int64) error {
	b.db.SetStepUser(userId, "start")
	botMsg := tgbotapi.NewMessage(userId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü•≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ <b>/start</b> ")
	botMsg.ParseMode = tgbotapi.ModeHTML
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)
	botMsg.ReplyMarkup = keyboard
	if err := b.sendMessage(userId, botMsg); err != nil {
		return fmt.Errorf("error send message in sendRestartMessage: %w", err)
	}
	return nil
}

// –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
func (b *BotTelegram) cleareMessage(userId int64, messageId int) error {
	if err := b.db.DeleteUsermessageId(messageId); err != nil {
		return err
	}

	deleteMsg := tgbotapi.NewDeleteMessage(userId, messageId)
	if _, err := b.bot.Send(deleteMsg); err != nil {
		return fmt.Errorf("error cleare messageId%d: %w", messageId, err)
	}
	return nil
}

// –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞.
func (b *BotTelegram) cleareAllChat(userId int64) error {
	startMessageId, err := b.db.GetStartMessageId(userId)
	if err != nil {
		return err
	}

	adMessageId, err := b.db.GetAdMessageId(userId)
	if err != nil {
		return err
	}

	infoMessageId, err := b.db.GetAdMessageId(userId)
	if err != nil {
		return err
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö messageId.
	messageIds, err := b.db.GetUserMessageIds(userId)
	if err != nil {
		return err
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫—Ä–æ–º–µ startMessage / adMessage / infoMessage.
	for _, messageId := range messageIds {
		if messageId == startMessageId || messageId == adMessageId || messageId == infoMessageId {
			continue
		}
		b.cleareMessage(userId, messageId)
	}

	return nil
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
func (b *BotTelegram) sendMessage(userId int64, c tgbotapi.Chattable) error {
	botMsg, err := b.bot.Send(c)
	if err != nil {
		return err
	}

	if err := b.db.AddUserMessageId(userId, botMsg.MessageID); err != nil {
		return err
	}

	return nil
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
func (b *BotTelegram) sendAlertMessage(userId int64, c tgbotapi.Chattable) error {
	botMsg, err := b.bot.Send(c)
	if err != nil {
		return err
	}

	// –î–æ–±–∞–≤–ª–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–¥.
	if err := b.db.AddUserMessageId(userId, botMsg.MessageID); err != nil {
		return err
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.
	if err := b.db.UpdateTimeLastAlert(userId, time.Now()); err != nil {
		return err
	}

	return nil
}

// –ò–Ω–∏—Ü–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
func (b *BotTelegram) initSessions(userId int64) {
	b.sessions[userId] = &models.Session{
		Cache: make(map[string]interface{}),
	}
}

// –ï—Å–ª–∏ ad —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–µ–Ω–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è true. –ò–Ω–∞—á–µ false.
func fullDataAdEvent(ae *models.AdEvent) bool {
	if ae.UserId == 0 {
		log.Println("not found ae.UserId event")
		return false
	}

	if ae.Type == "" {
		log.Println("not found ae.Type event")
		return false
	}

	if ae.CreatedAt == "" {
		log.Println("not found ae.CreatedAt event")
		return false
	}

	if ae.DateStart == "" {
		log.Println("not found ae.DateStart event")
		return false
	}

	return true
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞.
func (b *BotTelegram) fromCache(userId int64, key string) (interface{}, bool) {
	if b.sessions == nil {
		return nil, false
	}

	session, ok := b.sessions[userId]
	if !ok {
		return nil, false
	}

	value, ok := session.Cache[key]
	if !ok {
		return nil, false
	}

	return value, true
}

// –ó–∞–ø–∏—Å—å –≤ –∫—ç—à.
func (b *BotTelegram) toCache(userId int64, key string, value interface{}) bool {
	if b.sessions == nil {
		return false
	}

	session, ok := b.sessions[userId]
	if !ok {
		return false
	}

	session.Cache[key] = value

	return true
}
