package telegram

import (
	"ada-telegram-bot/pkg/models"
	"ada-telegram-bot/pkg/subscriber"
	"ada-telegram-bot/pkg/service"
	"fmt"
	"log"
	"strconv"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
func (b *BotTelegram) handlerMessage(msg *tgbotapi.Message) error {
	userId := msg.Chat.ID
	fmt.Printf("Info %s: user=%s; MSG=%s;\n", time.Now().Format("2006-01-02 15:04:05.999"), msg.From.UserName, msg.Text)
	step, err := b.db.GetStepUser(userId)
	if err != nil {
		return err
	}

	// –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—é—Ç—Å—è –æ—Ç—Ç–∞–ª–∫–∏–≤–∞—è—Å—å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	switch step {
	case "ad_event.create.partner":
		if err := adEventPartner(b, msg); err != nil {
			log.Println("error in adEventPartner: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	case "ad_event.create.channel":
		if err := adEventChannel(b, msg); err != nil {
			log.Println("error in adEventChannel: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	case "ad_event.create.price":
		if err := adEventPrice(b, msg); err != nil {
			log.Println("error in adEventPrice: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	case "ad_event.create.date_start":
		if err := adEventDateStart(b, msg); err != nil {
			log.Println("error in adEventDateStart: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	case "ad_event.create.date_end":
		if err := adEventDateEnd(b, msg); err != nil {
			log.Println("error in adEventDateEnd: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	case "ad_event.update.partner":
		if err := adEventUpdatePartner(b, msg); err != nil {
			log.Println("error in adEventUpdatePartner: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	case "ad_event.update.channel":
		if err := adEventUpdateChannel(b, msg); err != nil {
			log.Println("error in adEventUpdateChannel: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	case "ad_event.update.price":
		if err := adEventUpdatePrice(b, msg); err != nil {
			log.Println("error in adEventUpdatePrice: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	case "ad_event.update.date_start":
		if err := adEventUpdateDateStart(b, msg); err != nil {
			log.Println("error in adEventUpdateDateStart: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	case "ad_event.update.date_end":
		if err := adEventUpdateDateEnd(b, msg); err != nil {
			log.Println("error in adEventUpdateDateEnd: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	case "ad_event.update.arrival_of_subscribers":
		if err := adEventUpdateArrivalOfSubscribers(b, msg); err != nil {
			log.Println("error in adEventUpdateArrivalOfSubscribers: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	default:
		botMsg := tgbotapi.NewMessage(userId, "–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ... üòî")
		botMsg.ParseMode = tgbotapi.ModeHTML
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
			),
		)
		botMsg.ReplyMarkup = keyboard

		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}

	}

	return nil
}

func adEventPartner(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxUrlType1.MatchString(msg.Text) && !models.RegxUrlType2.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"+getExamplePartnerUrl())
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω–Ω—ã–π —Ç–∏–ø.
	if models.RegxUrlType2.MatchString(msg.Text) {
		msg.Text = "https://t.me/" + msg.Text[1:]
	}

	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}

	adEvent.Partner = msg.Text
	b.db.SetStepUser(userId, "ad_event.create.channel")

	botMsg := tgbotapi.NewMessage(userId, "üéâ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>")
	botMsg.ParseMode = tgbotapi.ModeHTML
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.
	text, err := textForGetDateChannelUrl(adEvent.Type)
	if err != nil {
		return err
	}
	botMsg = tgbotapi.NewMessage(userId, text)
	botMsg.ParseMode = tgbotapi.ModeHTML
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	return nil
}

func adEventChannel(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID
	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}

	if !models.RegxUrlType1.MatchString(msg.Text) && !models.RegxUrlType2.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."+getExampleChannelUrl())
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω–Ω—ã–π —Ç–∏–ø.
	if models.RegxUrlType2.MatchString(msg.Text) {
		msg.Text = "https://t.me/" + msg.Text[1:]
	}

	subChannel, err := subscriber.Parse(msg.Text)
	if err != nil {
		return err
	}
	adEvent.SubscribersOfChannel = subChannel

	adEvent.Channel = msg.Text
	b.db.SetStepUser(userId, "ad_event.create.price")

	botMsg := tgbotapi.NewMessage(userId, "üéâ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>")
	botMsg.ParseMode = tgbotapi.ModeHTML
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
	text, err := textForGetPrice(adEvent.Type)
	if err != nil {
		return err
	}
	botMsg = tgbotapi.NewMessage(userId, text)
	if adEvent.Type == models.TypeMutual || adEvent.Type == models.TypeBarter {
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "ad_event.create.price.skip"),
			),
		)
		botMsg.ReplyMarkup = keyboard
	}
	botMsg.ParseMode = tgbotapi.ModeHTML
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	return nil
}

func adEventPrice(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxPrice.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		<b>–ü—Ä–∏–º–µ—Ä:</b> <code>1000</code>`)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}

	price, err := strconv.ParseInt(msg.Text, 0, 64)
	if err != nil {
		return err
	}

	adEvent.Price = price
	b.db.SetStepUser(userId, "ad_event.create.date_start")

	botMsg := tgbotapi.NewMessage(userId, "üéâ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>")
	botMsg.ParseMode = tgbotapi.ModeHTML
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	text, err := textForGetDateStart(adEvent.Type)
	if err != nil {
		return err
	}
	botMsg = tgbotapi.NewMessage(userId, text)
	botMsg.ParseMode = tgbotapi.ModeHTML
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	return nil
}

func adEventDateStart(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	exampleDate, err := getTextExampleDate()
	if err != nil {
		return err
	}
	if !models.RegxAdEventDate.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`+exampleDate)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ ad —Å–æ–±—ã—Ç–∏–π.
	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}
	adEvent.DateStart = msg.Text

	botMsg := tgbotapi.NewMessage(userId, "üéâ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>")
	botMsg.ParseMode = tgbotapi.ModeHTML
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è.
	text, err := textForGetDateEnd(adEvent.Type)
	if err != nil {
		return err
	}
	b.db.SetStepUser(userId, "ad_event.create.date_end")
	botMsg = tgbotapi.NewMessage(userId, text)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "ad_event.create.date_end.skip"),
		),
	)
	botMsg.ReplyMarkup = keyboard
	botMsg.ParseMode = tgbotapi.ModeHTML
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	return nil
}

func adEventDateEnd(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	exampleDate, err := getTextExampleDate()
	if err != nil {
		return err
	}
	if !models.RegxAdEventDate.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		`+exampleDate)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ ad —Å–æ–±—ã—Ç–∏–π.
	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}
	adEvent.DateEnd = msg.Text

	// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è.
	durationDateStart, err := service.ParseUserDateToTime(adEvent.DateStart)
	if err != nil {
		return fmt.Errorf("error parse durationDateStart: %w", err)
	}

	durationDateEnd, err := service.ParseUserDateToTime(adEvent.DateEnd)
	if err != nil {
		return fmt.Errorf("error parse durationDateEnd: %w", err)
	}

	if durationDateEnd.Sub(durationDateStart) <= 0 {
		botMsg := tgbotapi.NewMessage(userId, "–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –º–µ–Ω—å—à–µ –¥–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.
	text, err := textForSuccessfullyAddDeleteDate(adEvent.Type)
	if err != nil {
		return err
	}
	botMsg := tgbotapi.NewMessage(userId, text)
	botMsg.ParseMode = tgbotapi.ModeHTML
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è ad —Å–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
	if err := adEventCreateLastMessage(b, userId); err != nil {
		return err
	}

	return nil
}

func adEventCreateLastMessage(b *BotTelegram, userId int64) error {
	aE, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}

	text := "<b>‚úçÔ∏è –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ?</b>"
	text = text + createTextAdEventDescription(aE)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–∞", "ad_event.create.end"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å", "start"),
		),
	)
	botMsg := tgbotapi.NewMessage(userId, text)
	botMsg.ParseMode = tgbotapi.ModeHTML
	botMsg.ReplyMarkup = keyboard
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}
	return nil
}

func adEventUpdatePartner(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxUrlType1.MatchString(msg.Text) && !models.RegxUrlType2.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."+getExamplePartnerUrl())
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}
	adEvent.Partner = msg.Text

	if err := b.db.AdEventUpdate(adEvent); err != nil {
		return err
	}

	botMsg := tgbotapi.NewMessage(userId, "üéâ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>")
	botMsg.ParseMode = tgbotapi.ModeHTML
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", fmt.Sprintf("ad_event.control?%d", adEvent.Id)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)
	botMsg.ReplyMarkup = keyboard

	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	return nil
}

func adEventUpdateChannel(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxUrlType1.MatchString(msg.Text) && !models.RegxUrlType2.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."+getExampleChannelUrl())
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}
	adEvent.Channel = msg.Text

	if err := b.db.AdEventUpdate(adEvent); err != nil {
		return err
	}

	botMsg := tgbotapi.NewMessage(userId, "üéâ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>")
	botMsg.ParseMode = tgbotapi.ModeHTML
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", fmt.Sprintf("ad_event.control?%d", adEvent.Id)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)
	botMsg.ReplyMarkup = keyboard

	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	return nil
}

func adEventUpdatePrice(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxPrice.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		<b>–ü—Ä–∏–º–µ—Ä:</b> <code>1000</code>`)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}

	price, err := strconv.ParseInt(msg.Text, 0, 64)
	if err != nil {
		return err
	}

	adEvent.Price = price

	if err := b.db.AdEventUpdate(adEvent); err != nil {
		return err
	}

	botMsg := tgbotapi.NewMessage(userId, "üéâ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>")
	botMsg.ParseMode = tgbotapi.ModeHTML
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", fmt.Sprintf("ad_event.control?%d", adEvent.Id)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)
	botMsg.ReplyMarkup = keyboard

	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	return nil
}

func adEventUpdateDateStart(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	exampleDate, err := getTextExampleDate()
	if err != nil {
		return err
	}
	if !models.RegxAdEventDate.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		`+exampleDate)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}
	adEvent.DateStart = msg.Text

	if err := b.db.AdEventUpdate(adEvent); err != nil {
		return err
	}

	botMsg := tgbotapi.NewMessage(userId, "üéâ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>")
	botMsg.ParseMode = tgbotapi.ModeHTML
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", fmt.Sprintf("ad_event.control?%d", adEvent.Id)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)
	botMsg.ReplyMarkup = keyboard

	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	return nil
}

func adEventUpdateDateEnd(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	exampleDate, err := getTextExampleDate()
	if err != nil {
		return err
	}
	if !models.RegxAdEventDate.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		`+exampleDate)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}
	adEvent.DateEnd = msg.Text

	if err := b.db.AdEventUpdate(adEvent); err != nil {
		return err
	}

	botMsg := tgbotapi.NewMessage(userId, "üéâ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>")
	botMsg.ParseMode = tgbotapi.ModeHTML
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", fmt.Sprintf("ad_event.control?%d", adEvent.Id)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)
	botMsg.ReplyMarkup = keyboard

	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	return nil
}

func adEventUpdateArrivalOfSubscribers(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxArrivalOfSubscribers.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏—Ö–æ–¥ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		<b>–ü—Ä–∏–º–µ—Ä:</b> 1000`)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}

	arrivalOfSubscribers, err := strconv.ParseInt(msg.Text, 0, 64)
	if err != nil {
		return err
	}
	adEvent.ArrivalOfSubscribers = arrivalOfSubscribers

	if err := b.db.AdEventUpdate(adEvent); err != nil {
		return err
	}

	botMsg := tgbotapi.NewMessage(userId, "üéâ <b>–ü—Ä–∏—Ö–æ–¥ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>")
	botMsg.ParseMode = tgbotapi.ModeHTML
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", fmt.Sprintf("ad_event.control?%d", adEvent.Id)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)
	botMsg.ReplyMarkup = keyboard

	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	return nil
}
