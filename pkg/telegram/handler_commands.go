package telegram

import (
	"fmt"
	"log"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/spf13/viper"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥.
func (b *BotTelegram) handlerCommand(msg *tgbotapi.Message) error {
	userId := msg.Chat.ID
	fmt.Printf("Info %s; user=%s; CMD=%s;\n", time.Now().Format("2006-01-02 15:04:05.999"), msg.From.UserName, msg.Command())
	switch msg.Command() {
	case "start":
		if err := b.cmdStart(msg); err != nil {
			log.Println("error in cmdStart: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
		return nil
	default:
		if err := b.handlerMessage(msg); err != nil {
			log.Println("error in handlerMessage: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
		// botMsg := tgbotapi.NewMessage(userId, `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ü•≤`)
		// botMsg.ParseMode = tgbotapi.ModeHTML
		// if err := b.sendMessage(userId, botMsg); err != nil {
		// 	return fmt.Errorf("error send unknow command error: %w", err)
		// }
		return nil
	}
}

// –ö–æ–º–∞–Ω–¥–∞ /start
func (b *BotTelegram) cmdStart(msg *tgbotapi.Message) error {
	userId := msg.Chat.ID
	b.initSessions(userId)

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.
	if err := b.db.DefaultUserCreation(userId, msg.Chat.UserName, msg.Chat.FirstName); err != nil {
		return err
	}

	// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	if err := b.clearCacheOfUser(userId); err != nil {
		return err
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
	if err := b.db.UpdateLastActive(userId); err != nil {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ adMsg.
	if viper.GetBool("ada_bot.ad_message") {
		if err := b.sendAdMessage(userId); err != nil {
			return err
		}
	} else {
		if err := b.db.UpdateAdMessageId(userId, 0); err != nil {
			return err
		}
	}

	// TODO –û—Ç–ø—Ä–∞–≤–∫–∞ infoMsg.

	// –û—Ç–ø—Ä–∞–≤–∫–∞ startMsg.
	if err := sendStartMessage(b, userId); err != nil {
		return err
	}

	// –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞.
	if err := b.cleareAllChat(userId); err != nil {
		return err
	}

	return nil
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ startMessage.
func sendStartMessage(b *BotTelegram, userId int64) error {
	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∞–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	if err := b.db.SetStepUser(userId, "start"); err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ botMsg startMessage.
	text := `üìì <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞:</b>`
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", "ad_event.create"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è", "ad_event.view"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "statistics"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "info"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "help"),
		),
	)
	botMsg := tgbotapi.NewMessage(userId, text)
	botMsg.ParseMode = tgbotapi.ModeHTML
	botMsg.ReplyMarkup = keyboard

	newStartMessage, err := b.bot.Send(botMsg)
	if err != nil {
		return fmt.Errorf("error send new startMessage: %w", err)
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ startMessageId.
	if err := b.db.AddUserMessageId(userId, newStartMessage.MessageID); err != nil {
		return err
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–∞—Ä–æ–≥–æ startMessage.
	startMessageId, err := b.db.GetStartMessageId(userId)
	if err != nil {
		log.Println("b.db.GetStartmessageId startMenu error: ", err)
	}
	b.cleareMessage(userId, startMessageId)

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ startMessage.
	if err := b.db.UpdateStartMessageId(userId, newStartMessage.MessageID); err != nil {
		return err
	}

	return nil
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ adMessage.
func (b *BotTelegram) sendAdMessage(userId int64) error {
	// –°–æ–∑–¥–∞–Ω–∏–µ botMsg adMessage.
	text := `üìì <b>üíµ –†–ï–ö–õ–ê–ú–ê </b>`
	// keyboard := tgbotapi.NewInlineKeyboardMarkup(
	// 	tgbotapi.NewInlineKeyboardRow(
	// 		tgbotapi.NewInlineKeyboardButtonData("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏", "ad_event"),
	// 	),
	// )
	botMsg := tgbotapi.NewMessage(userId, text)
	botMsg.ParseMode = tgbotapi.ModeHTML
	// botMsg.ReplyMarkup = keyboard

	// –û—Ç–ø—Ä–∞–≤–∫–∞ botMsg adMessage.
	newAdMessage, err := b.bot.Send(botMsg)
	if err != nil {
		return fmt.Errorf("error send new adMessage: %w", err)
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ adMessageId.
	if err := b.db.AddUserMessageId(userId, newAdMessage.MessageID); err != nil {
		return err
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–∞—Ä–æ–≥–æ startMessage.
	adMessageId, err := b.db.GetAdMessageId(userId)
	if err != nil {
		log.Println("b.db.GetStartmessageId startMenu error: ", err)
	}
	b.cleareMessage(userId, adMessageId)

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ adMessage.
	if err := b.db.UpdateAdMessageId(userId, newAdMessage.MessageID); err != nil {
		return err
	}

	return nil
}

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// TODO —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func (b *BotTelegram) clearCacheOfUser(userId int64) error {
	delete(b.adEventCreatingCache, userId)
	delete(b.adEventsCache, userId)
	return nil
}
